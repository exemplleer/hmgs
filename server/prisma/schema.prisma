generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addition {
  id              Int               @id(map: "pkAddition") @default(autoincrement())
  title           String            @db.VarChar(256)
  price           Decimal           @db.Decimal(18, 2)
  isAvailable     Boolean
  description     String?
  bookingAddition bookingAddition[]
}

model amenity {
  id          Int           @id(map: "pkAmenity") @default(autoincrement())
  title       String        @db.VarChar(256)
  isAvailable Boolean
  description String?
  roomAmenity roomAmenity[]
}

model booking {
  id              Int               @id(map: "pkBooking") @default(autoincrement())
  personId        Int
  totalPrice      Decimal           @db.Decimal(18, 2)
  status          String            @db.VarChar(64)
  person          person            @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkPersonBooking")
  bookingAddition bookingAddition[]
  bookingRoom     bookingRoom[]
  payment         payment[]
}

model bookingAddition {
  bookingId  Int
  additionId Int
  addition   addition @relation(fields: [additionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkAdditionBookingAddition")
  booking    booking  @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkBookingBookingAddition")

  @@id([bookingId, additionId], map: "pkBookingAddition")
}

model bookingAmenity {
  bookingRoomId Int
  roomAmenityId Int
  bookingRoom   bookingRoom @relation(fields: [bookingRoomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkBookingRoomBookingAmenity")
  roomAmenity   roomAmenity @relation(fields: [roomAmenityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkRoomAmenityBookingAmenity")

  @@id([bookingRoomId, roomAmenityId], map: "pkBookingAmenity")
}

model bookingRoom {
  id             Int              @id(map: "pkBookingRoom") @default(autoincrement())
  bookingId      Int
  roomId         Int
  peopleCount    Int
  startDate      DateTime         @db.Timestamp(6)
  endDate        DateTime         @db.Timestamp(6)
  status         String           @db.VarChar(64)
  bookingAmenity bookingAmenity[]
  booking        booking          @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkBookingBookingRoom")
  room           room             @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkRoomBookingRoom")
}

model payment {
  id        Int      @id(map: "pkPayment") @default(autoincrement())
  bookingId Int
  payDate   DateTime @db.Timestamp(6)
  method    String   @db.VarChar(64)
  amount    Decimal  @db.Decimal(18, 2)
  status    String   @db.VarChar(64)
  booking   booking  @relation(fields: [bookingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkBookingPayment")
}

model person {
  id            Int              @id(map: "pkPerson") @default(autoincrement())
  phone         String?          @unique(map: "akPersonPhone") @db.VarChar(16)
  email         String           @unique @db.VarChar(128)
  password      String           @db.VarChar(128)
  firstName     String           @db.VarChar(256)
  lastName      String           @db.VarChar(256)
  role          String           @db.VarChar(64)
  booking       booking[]
  refreshSesson refreshSession[]
}

model refreshSession {
  id           Int     @id(map: "pkRefreshSession") @default(autoincrement())
  personId     Int
  refreshToken String  @db.VarChar(512)
  fingerprint  String? @db.VarChar(32)
  person       person  @relation(fields: [personId], references: [id], onDelete: Cascade)
}

model room {
  id          Int           @id(map: "pkRoom") @default(autoincrement())
  num         Int           @unique(map: "akRoomNum")
  title       String        @db.VarChar(256)
  price       Decimal       @db.Decimal(18, 2)
  capacity    Int
  created     DateTime      @default(now()) @db.Timestamp(6)
  updated     DateTime      @default(now()) @updatedAt @db.Timestamp(6)
  description String?
  bookingRoom bookingRoom[]
  roomAmenity roomAmenity[]
  roomStatus  roomStatus[]
}

model roomAmenity {
  id             Int              @id(map: "pkRoomAmenity") @default(autoincrement())
  roomId         Int
  amenityId      Int
  price          Decimal          @db.Decimal(18, 2)
  bookingAmenity bookingAmenity[]
  amenity        amenity          @relation(fields: [amenityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkAmenityRoomAmenity")
  room           room             @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkRoomRoomAmenity")
}

model roomStatus {
  id          Int      @id(map: "pkRoomStatus") @default(autoincrement())
  roomId      Int
  startDate   DateTime @db.Timestamp(6)
  endDate     DateTime @db.Timestamp(6)
  isAvailable Boolean
  room        room     @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkRoomRoomStatus")
}
